{
  "name": "qyro",
  "version": "2.1.0",
  "description": "Qyro: A powerful app generator simplifying development with Python and Qt.",
  "long_description": "<p align=\"center\">\n  <img src=\"https://ik.imagekit.io/kummiktgaiq/Qyro/logo_OE3b6z79V.png?updatedAt=1635261532682\" alt=\"Qyro Logo\" width=\"50%\">\n</p>\n\n<h3 align=\"center\">Qyro - Python Package Generator</h3>\n\n![GitHub Release](https://img.shields.io/github/v/release/runesc/Qyro?include_prereleases&display_name=release&color=stable&link=https%3A%2F%2Fgithub.com%2Frunesc%2FQyro%2Freleases)\n![GitHub Issues or Pull Requests](https://img.shields.io/github/issues/runesc/Qyro?color=%23ab7df8)\n![GitHub Issues or Pull Requests](https://img.shields.io/github/issues-closed/runesc/Qyro?color=green)\n![GitHub forks](https://img.shields.io/github/forks/runesc/Qyro)\n![GitHub stars](https://img.shields.io/github/stars/runesc/Qyro)\n![GitHub licence](  https://img.shields.io/github/license/runesc/Qyro)\n![PyPI Downloads](https://static.pepy.tech/badge/Qyro)\n\n\nQyro is a modern and powerful framework for building scalable desktop applications with Python and Qt. It offers a component-based architecture inspired by **React**, an advanced global state management system (**Pydux**), and seamless support for **hybrid interfaces** that combine native widgets with modern web UIs. With a comprehensive CLI and an innovative **hot-reloading engine**, Qyro provides a complete and efficient workflow for developers.\n\n<p align=\"center\">\n    <a href=\"https://Qyro.neuri.ai/\"><strong>Explore the docs Â»</strong></a>\n</p>\n\n---\n\n### ðŸ”¥ Key Features\n\n* **Reactive Component Architecture**: Design your UI using a component-based React-style approach that guides each element through a lifecycle of initialization, rendering, and cleanup.\n* **Global State Management (Pydux)**: A robust, type-safe system (powered by Pydantic) for real-time communication between your components.\n* **Hybrid Support**: Seamlessly combine native Qt widgets with modern web UIs (React, Vue, etc.) within the same application.\n* **Hot Reloading Engine**: Boost your productivity with instant code reloads that let you see UI changes without restarting the app.\n* **Comprehensive CLI**: A command-line interface that automates your entire app lifecycle, from initialization to compilation and installer creation.\n\n---\n\n### ðŸš€ Quick Start\n\nThe Qyro workflow is simple and intuitive. Hereâ€™s how you can initialize, run, and compile your first application:\n\n```bash\n# 1. Install Qyro using pip\npip install Qyro\n\n# 2. Initialize a new project with the CLI\nQyro init\n\n# 3. Run your application in development mode\nQyro start\n\n# 4. Compile your app into a standalone executable\nQyro freeze\n\n# 5. Create an installer for your application\nQyro installer\n```\n\n### ðŸ“– Guide\n\n- [Installation](#installation)\n- [CLI Usage](#cli-usage)\n- [Component Architecture](#component-architecture)\n- [State Management with Pydux](#state-management-with-pydux)\n- [Hybrid Development (Web + Native)](#hybrid-development-web--native)\n- [Changelog](#changelog)\n- [License](#license)\n\n### Installation\nFor best practices, we recommend using a virtual environment.\n\n1. **Create and activate your virtual environment**:\n```bash\n# With conda\nconda create -n my-env python=3.11 -y\nconda activate my-env\n\n# With virtualenv\npython -m venv venv\n\n# macOS/Linux:\nsource venv/bin/activate\n\n# Windows:\n.\\venv\\Scripts\\activate.bat\n```\n\n2. **Install Qyro**:\n```bash\npip install Qyro\n```\n\nAlternatively, you can install the latest development version directly from GitHub:\n```bash\npip install git+[https://github.com/neuri-ai/Qyro.git](https://github.com/neuri-ai/Qyro.git)\n```\n\nOr clone the repository and install it locally:\n```bash\ngit clone [https://github.com/neuri-ai/Qyro](https://github.com/neuri-ai/Qyro)\n\ncd Qyro\n\npython setup.py install\n```\n\n### CLI Usage\n\nThe Qyro CLI allows you to manage your project efficiently.\n\n| Command        | Description                                                                 |\n|----------------|-----------------------------------------------------------------------------|\n| `Qyro init`     | Initializes a new project in the current directory with an interactive setup. |\n| `Qyro start`    | Runs your application from the source code in development mode.             |\n| `Qyro create`   | Creates a new component or view from templates, *maintaining* your project's structure. |\n| `Qyro freeze`   | Compiles your code into a standalone executable for distribution.           |\n| `Qyro installer`| Creates a user-friendly installer for your app (e.g., `.exe` on Windows, `.dmg` on macOS). |\n| `Qyro test`     | Automatically runs the unit tests for your project.                         |\n| `Qyro clean`    | Cleans up temporary and build files generated by Qyro.                       |\n\n### Component Architecture\n\nTraditional Qt is event-driven, but it lacks a structured lifecycle for managing UI components at a high level. This can lead to complex, hard-to-maintain code as applications grow.\n\nQyro solves this with a well-defined, React-inspired component lifecycle. It provides clear hooks for every stage of a component's life, from creation to destruction. This allows you to write clean, predictable code by providing specific moments to:\n\n- **Mounting**: Set up a component and fetch initial data.\n- **Updating**: React to data changes and re-render the UI.\n- **Unmounting**: Clean up resources to prevent memory leaks.\n\nThis architecture brings a modern and robust development experience to both native Qt widgets and hybrid web components.\n\n### State Management with Pydux\n\nPydux is Qyro's global state management system, inspired by JavaScript's Redux.\nIt provides a type-safe, reactive way to manage application state across components. Pydux uses Pydantic for data validation and serialization, ensuring that your state is always consistent and reliable.\n\n- **Unified State**: Maintains a single global state that is shared across all your components.\n- **Type Safety**: Ensures that your state is always valid and adheres to defined schemas.\n- **Replaces QyroStore**: `QyroStore` has been deprecated. It is highly recommended to migrate to Pydux to leverage all of its features.\n\n### Hybrid Development (Web + Native)\nQyro supports hybrid development, allowing you to combine native Qt widgets with modern web UIs (like React or Vue) in the same application. This enables you to:\n- **Hybrid Interfaces**: Use native widgets for performance-critical parts of your app.\n- **Fluid Communication**: `WebEngineBridge` and `BridgeManager` provide a bidirectional messaging channel, allowing your web frontend and Python backend to communicate transparently.\n- **Total Synchronization**: Both native widgets and web components can use the same Pydux state management system, ensuring a consistent and reactive user experience.\n\n## Changelog\n\n#### Compatibility & Core Fixes\n- Added compatibility with PySide6.2+ âœ…\n- Fixed compatibility issue with PySide2 (PySide6 and Qt5 use `exec()`, while PySide2 uses `exec_()`) âœ…\n- Fixed an issue that prevented maximizing the window when creating a new project âœ…\n- Added compatibility with PyInstaller 6.9.0+ âœ…\n- Fixed an issue where the `QApplication` singleton required destruction before creating a new instance of `QApplication` âœ…\n- Fixed the `get_resource` method, which previously could not be used normally âœ…\n- Fixed a compilation issue on macOS that prevented applications from compiling correctly due to Sparkle âœ…\n- Fixed installer compatibility to support Apple Silicon âœ…\n\n#### CLI & Project Management\n- Fixed an issue with the CLI in the component/view generator that occurred when the \"views\" or \"components\" folder did not exist within the project âœ…\n- Updated icons âœ…\n- Fixed `resources` folder not being created when running `Qyro init` âœ…\n- Fixed an issue where `Qyro init` would fail due to a missing `src/build/settings/base.json` file on new projects âœ…\n- Fixed an issue where application names were not properly converted to CamelCase when generating new projects âœ…\n- Fixed an issue where `build_settings` could not be accessed in compiled applications and source projects âœ…\n\n### ðŸŽ‰ Major New Features: Pydux State Management\n\n- Revolutionary state management: Added **Pydux**, which manages a global state between components, allowing real-time communication between them ðŸŽ‰\n- Components integration: Components generated by the CLI now natively support Pydux ðŸŽ‰\n\n#### New! Advanced Pydux Features\n- Type-safe state management: Full Pydantic integration with dynamic schema validation âœ¨\n- Nested model support: Complex data structures with automatic validation âœ¨\n- Partial updates: `update_nested_model()` method for efficient updates of nested objects âœ¨\n- Dot notation access: `get_nested()` method for intuitive data retrieval (e.g., `store.get_nested(\"user.name\")`) âœ¨\n- Schema flexibility: Progressive typing - start with simple dicts, evolve to strict Pydantic models âœ¨\n- Production-ready validation: Runtime type checking with clear error messages âœ¨\n\n#### Deprecation Notice\n- **Deprecated:** `QyroStore` is now marked as deprecated. Use **Pydux** instead.\n  Backward compatibility is maintained for all v1.1.x versions, but `QyroStore` will be removed in a future major release.\n\n### ðŸŽ‰ Native & Web UI Hybrid Applications\n\n#### New! Native and Web UI Integration\n\n- **WebEngineBridge:** Added `WebEngineBridge` and `BridgeManager` classes to simplify communication between Python and **web-based user interfaces** built with React, Vue, or plain HTML/CSS/JS ðŸŽ‰\n- **Native and Web UI design:** With Qyro, you can design fully **native Qt user interfaces** or create **modern web-based interfaces** that run inside your desktop app.\n- **Hybrid application support:** First-class support for **hybrid applications that seamlessly combine native Qt widgets and full web UIs** in the same app âœ…\n- **Web â†” Python messaging:** Built-in event-driven messaging API enables smooth communication between web frontends and the Python backend ðŸŽ‰\n- **Unified lifecycle & state management:** Both native and web UI components support the same component lifecycle and Pydux global state management, making your app consistent and reactive âœ…\n\n### ðŸ”¥ New! Hot Reloading Engine\n- **Real-time hot reloading:** Instantly see code changes in components and views without restarting the app\n- **Automatic reloading:** Changes to Python files trigger automatic reloads of affected components, views, and the entire app âœ¨\n- **Developer productivity boost:** Shortens the feedback loop dramatically, enabling rapid iteration and testing âœ…\n\n\n## Creators\n\n**Luis Alfredo Reyes**\n\n- <https://twitter.com/Fredo_Dev>\n- <https://github.com/runesc>\n\n\n### License\n\nCode and documentation copyright 2020â€“2025. [Qyro](#) Code released under the [GPL v3 License](#). Docs released under [Creative Commons](https://creativecommons.org/licenses/by/3.0/).\n",
  "license": "GPL-3.0-only",
  "author": "Neuri",
  "author_email": "alfredo@neuri.ai",
  "homepage": "https://Qyro.neuri.ai",
  "repository": {
    "type": "git",
    "url": "https://github.com/neuri-ai/Qyro"
  },
  "keywords": [
    "Qyro",
    "python",
    "pyqt",
    "pyside",
    "desktop",
    "application",
    "generator",
    "cli",
    "component",
    "state management",
    "pydux",
    "fbs",
    "react",
    "redux",
    "app development",
    "modular",
    "scalable",
    "lifecycle",
    "component-based",
    "pyside6",
    "pyqt6",
    "pyqt5",
    "pyqt6 generator",
    "pyqt5 generator",
    "pyside6 generator",
    "pyside5 generator",
    "pyqt6 app",
    "pyqt5 app",
    "pyside6 app",
    "pyside5 app",
    "app generator",
    "redux"
  ],
  "platforms": [
    "MacOS",
    "Windows",
    "Debian",
    "Fedora",
    "CentOS",
    "Arch",
    "Raspbian"
  ]
}